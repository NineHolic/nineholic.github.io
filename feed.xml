<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://nineholic.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nineholic.github.io/" rel="alternate" type="text/html" /><updated>2021-05-10T18:34:10+08:00</updated><id>https://nineholic.github.io/feed.xml</id><title type="html">Nine</title><author><name>Nine</name></author><entry><title type="html">Git 基础</title><link href="https://nineholic.github.io/2020/04/22/git-basis/" rel="alternate" type="text/html" title="Git 基础" /><published>2020-04-22T00:00:00+08:00</published><updated>2020-04-22T00:00:00+08:00</updated><id>https://nineholic.github.io/2020/04/22/git-basis</id><content type="html" xml:base="https://nineholic.github.io/2020/04/22/git-basis/">&lt;h2 id=&quot;git-基础知识介绍&quot;&gt;Git 基础知识介绍&lt;/h2&gt;

&lt;h4 id=&quot;1git-与-github-的区别&quot;&gt;1、Git 与 Github 的区别&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Git 是一个分布式版本控制系统，简单的说其就是一个软件，用于记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的软件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Github（https://www.github.com）是一个为用户提供 Git 服务的网站，简单说就是一个可以放代码的地方（不过可以放的当然不仅是代码）。Github 除了提供管理 Git 的 web 界面外，还提供了订阅、关注、讨论组、在线编辑器等丰富的功能。Github 被称之为全球最大的基友网站。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2本地仓库&quot;&gt;2、本地仓库&lt;/h4&gt;

&lt;p&gt;2.1、&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git 本地操作的三个区域：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;工作区：本地电脑存放项目文件的地方；&lt;/li&gt;
  &lt;li&gt;暂存区（Index/Stage）：在使用 git 管理项目文件的时候，其本地的项目文件会多出一个 .git 的文件夹，将这个 .git 文件夹称之为版本库。其中 .git 文件夹中包含了两个部分，一个是暂存区（Index/Stage），顾名思义就是暂时存放文件的地方，通常使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; 命令将工作区的文件添加到暂存区里；&lt;/li&gt;
  &lt;li&gt;本地仓库：.git 文件夹里还包括 git 自动创建的 master 分支，并且将HEAD指针指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 命令可以将暂存区中的文件添加到本地仓库中；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/工作流程.png&quot; alt=&quot;三个区域&quot; /&gt;&lt;/p&gt;

&lt;p&gt;工作流程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/三个区域.png&quot; alt=&quot;工作流程&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.2、本地仓库操作&lt;/p&gt;

&lt;p&gt;仓库又名版本库，英文名 repository ，我们可以简单理解成是一个目录，用于存放代码的，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除等操作 Git 都能跟踪到。&lt;/p&gt;

&lt;p&gt;① 在安装好后首次使用需要先进行全局配置
桌面空白处右键，点击 Git Bash Here 以打开 Git 命令行窗口&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;用户名&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;邮箱地址&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221193654605.png&quot; alt=&quot;image-20200221193040545&quot; /&gt;&lt;/p&gt;

&lt;p&gt;② 创建仓库，创建一个文件夹，进入文件夹内，将git仓库初始化：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;，初始化成功后会在该目录下有 .git 名字的隐藏文件夹&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221193040545.png&quot; alt=&quot;image-20200221193654605&quot; /&gt;&lt;/p&gt;

&lt;p&gt;③ Git 常用指令操作&lt;/p&gt;

&lt;p&gt;查看当前状态：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 【非必要】&lt;/p&gt;

&lt;p&gt;添加到暂存区：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add 文件名&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;提交至版本库：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;注释内容&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 语法&lt;/span&gt;
git add 文件名
git add 文件名1 文件名2 文件名3 …
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;		      //添加当前目录到缓存区中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在后续对于文件（可以操作 1 个或多个）操作之后，重复使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 指令即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221203621284.png&quot; alt=&quot;image-20200221203621284&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.3、版本回退&lt;/p&gt;

&lt;p&gt;版本回退分为两步骤进行操作：
① 查看版本，确定需要回到的时刻点
			指令：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --pretty=oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221204428390.png&quot; alt=&quot;image-20200221204428390&quot; /&gt;&lt;/p&gt;

&lt;p&gt;② 回退操作
​			指令：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --hard&lt;/code&gt; 提交编号&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221204702981.png&quot; alt=&quot;image-20200221204702981&quot; /&gt;&lt;/p&gt;

&lt;p&gt;③ 查看历史操作，以得到最新的 commit id&lt;/p&gt;

&lt;p&gt;指令：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221204953023.png&quot; alt=&quot;image-20200221204953023&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3两种常规使用方式&quot;&gt;3、两种常规使用方式&lt;/h4&gt;

&lt;h5 id=&quot;31基于-httphttps-协议&quot;&gt;3.1、基于 http/https 协议&lt;/h5&gt;

&lt;p&gt;a. 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; 指令克隆线上仓库到本地
语法： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt;  线上仓库地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221212548678.png&quot; alt=&quot;image-20200221212548678&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b. 在仓库上做对应的操作（提交暂存区、提交本地仓库、提交线上仓库、拉取线上仓库）
将本地仓库同步到 git 远程仓库中：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在 push 前需要修改 .git/config 文件内容：&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[core]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;repositoryformatversion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;filemode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;bare&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;logallrefupdates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;symlinks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;ignorecase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[remote &quot;origin&quot;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://用户名:密码@github.com/用户名/仓库名.git&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;+refs/heads/*:refs/remotes/origin/*&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[branch &quot;master&quot;]&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;origin&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;refs/heads/master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221212803927.png&quot; alt=&quot;image-20200221212803927&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拉取线上仓库：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221214620172.png&quot; alt=&quot;image-20200221214620172&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;32基于-ssh-协议&quot;&gt;3.2、基于 ssh 协议&lt;/h5&gt;

&lt;p&gt;生成公私玥对指令：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -t rsa -C &quot;注册邮箱&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221223827885.png&quot; alt=&quot;image-20200221223827885&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上传公钥文件内容（id_rsa.pub）到 github 中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; 远程仓库&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221222922406.png&quot; alt=&quot;image-20200221222922406&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分支相关指令：
查看分支：git branch
创建分支：git branch 分支名
切换分支：git checkout 分支名 
删除分支：git branch -d 分支名
合并分支：git merge 被合并的分支名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看、创建分支：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221225058586.png&quot; alt=&quot;image-20200221225058586&quot; /&gt;&lt;/p&gt;

&lt;p&gt;切换分支、合并分支、删除分支：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221230146089.png&quot; alt=&quot;image-20200221230146089&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 分支提交到远程仓库&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/NineHolic/cloudimage/raw/master/git/image-20200221230327303.png&quot; alt=&quot;image-20200221230327303&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4解决冲突&quot;&gt;4、解决冲突&lt;/h4&gt;

&lt;p&gt;多人开发同一个项目时，如果两个人修改了同一个文件同一个地方&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;手动解决冲突&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;忽略文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;忽略文件需要新建一个名为 .gitignore 的文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录及其子目录生效。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：该文件因为没有文件名，没办法直接在windows目录下直接创建，可以通过命令行 Git Bash 来 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;touch&lt;/code&gt;创建。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;常见规则写法有如下几种：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1）/mtk/               过滤整个文件夹
2）*.zip               过滤所有.zip 文件
3）/mtk/do.c           过滤某个具体文件
4) !index.php	       不过滤具体某个文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Nine</name></author><category term="git" /><summary type="html">Git 基础知识介绍</summary></entry></feed>