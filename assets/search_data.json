

[
  
  
    {
      "title"    : "页面没有找到",
      "url"      : "https://blog.nine.gt.tc/404.html",
      "keywords" : "404"
    } ,
  
  
  
    {
      "title"    : "About",
      "url"      : "https://blog.nine.gt.tc/about/",
      "keywords" : "nineholic"
    } ,
  
  
  
    {
      "title"    : "Archives",
      "url"      : "https://blog.nine.gt.tc/archives/",
      "keywords" : "归档"
    } ,
  
  
  
    {
      "title"    : "Categories",
      "url"      : "https://blog.nine.gt.tc/categories/",
      "keywords" : "分类"
    } ,
  
  
  
  
  
    {
      "title"    : "Links",
      "url"      : "https://blog.nine.gt.tc/links/",
      "keywords" : "友情链接"
    } ,
  
  
  
    {
      "title"    : "mindmap",
      "url"      : "https://blog.nine.gt.tc/mindmap-viewer/",
      "keywords" : "mindmap"
    } ,
  
  
  
    {
      "title"    : "Open Source Projects",
      "url"      : "https://blog.nine.gt.tc/open-source/",
      "keywords" : "开源,open-source,GitHub,开源项目"
    } ,
  
  
  
  
  
    {
      "title"    : "Wiki",
      "url"      : "https://blog.nine.gt.tc/wiki/",
      "keywords" : "维基, Wiki"
    } ,
  
  
  
  
  
  
  
  
  
  
  
  

  
    {
      "title"    : "Linux 下安装 Git",
      "category" : "Git",
      "content": "Linux 下编译安装 git 以及使用脚本安装 一、脚本安装 # 脚本安装 2.45.0 版本 curl -sSL https://fastly.jsdelivr.net/gh/NineHolic/nineholic.github.io@master/_posts/files/shell/install_git.sh | bash 二、手动安装 1、安装依赖 # Centos/RedHat yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker autoconf automake libtool wget # 卸载旧版 yum -y remove git # Debian/Ubuntu apt-get -y install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev make wget 2、编译安装 源码地址：https://mirrors.edge.kernel.org/pub/software/scm/git/ # 下载源码 wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.45.0.tar.gz # 解压 tar -zxvf git-2.45.0.tar.gz &amp;&amp; cd git-2.45.0 # 编译安装 make configure ./configure --prefix=/usr/local/git make -j2 all &amp;&amp; make -j2 install 3、配置环境 # 添加软连接 ln -s /usr/local/git/bin/git /usr/bin/git # 查看 git 是否安装完成 git --version ",
      "url"      : "https://blog.nine.gt.tc/2020/02/22/linux-git-install/",
      "keywords" : "Git, Linux"
    } ,
  
    {
      "title"    : "Windows 下安装配置 Node.js",
      "category" : "Node.js",
      "content": "Windows 下安装配置Node.js 1、安装 Node.js 安装包及源码地址：https://nodejs.org/dist，下载相应版本，本文为：node-v13.10.0-x64.msi。 修改安装目录后点击 next 至安装完成，打开 cmd 验证是否安装成功。  Node.js 就是运行在服务端的 JavaScript， 是一个基于 Chrome V8 引擎的 JavaScript 运行环境 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效 npm 是 Node.js 依赖包管理工具，新版的 Node.js 已自带 npm ，安装 Node.js 时会一起安装 node -v npm -v  2、环境配置 在安装目录下新建 node_global 和 node_cache 目录。 # 配置 npm 安装的全局模块和缓存的路径（默认为 C 盘用户目录下） npm config set prefix “D:  Program Files  odejs  ode_global” npm config set cache “D:  Program Files  odejs  ode_cache” # 配置淘宝镜像 npm config set registry https://registry.npm.taobao.org # 验证以上是否配置成功 npm config list # 全局安装 Vue 模块，安装后会发现空目录 node_global 和 node_cache 产生了相关文件 npm install -g vue ",
      "url"      : "https://blog.nine.gt.tc/2020/02/22/windows-configure-nodejs/",
      "keywords" : "Windows, Node.js"
    } ,
  
    {
      "title"    : "Linux 下安装 Java",
      "category" : "Java",
      "content": "Linux 下安装配置 jdk 1.8、jdk 11 一、手动安装 1、下载 jdk 官网地址：jdk 1.8、jdk 11 # 根据自身 Linux 的版本下载对应的 jdk 版本 uname -a # 新建 Java 安装目录 mkdir /usr/local/java # 解压 tar -zxvf jdk-8u241-linux-x64.tar.gz -C /usr/local/java  2、配置环境变量 添加环境变量：vim /etc/profile # jdk8 末尾添加 JAVA_HOME=/usr/local/java/jdk1.8.0_241  JRE_HOME=/usr/local/java/jdk1.8.0_241/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH # jdk11 配置环境变量则较为简单 JAVA_HOME=/usr/local/java/jdk-11.0.11 export PATH=$PATH:$JAVA_HOME/bin 使修改的环境变量生效：source /etc/profile  其中 JAVA_HOME，JRE_HOME 根据自己的实际安装路径及 JDK 版本配置 3、验证是否安装成功 输入java -version，显示 java 版本信息，则说明 JDK 安装成功 二、脚本安装 安装目录：/usr/local/java # jdk 1.8 wget https://fastly.jsdelivr.net/gh/NineHolic/nineholic.github.io@master/_posts/files/shell/install_jdk8.sh &amp;&amp; /bin/bash install_jdk8.sh # jdk 11 wget https://fastly.jsdelivr.net/gh/NineHolic/nineholic.github.io@master/_posts/files/shell/install_jdk11.sh &amp;&amp; /bin/bash install_jdk11.sh ",
      "url"      : "https://blog.nine.gt.tc/2020/03/09/linux-install-java/",
      "keywords" : "Java, Linux"
    } ,
  
    {
      "title"    : "Centos7 下静默安装 Oracle 11g",
      "category" : "Oracle",
      "content": "Centos 7 下静默安装 Oracle 11g，安装环境：Centos 7.8、JDK 1.8、Oracle 11.2.0.1 一、安装 Oracle Oracle 11.2.0.1 官网下载地址： http://download.oracle.com/otn/linux/oracle11g/R2/linux.x64_11gR2_database_1of2.zip http://download.oracle.com/otn/linux/oracle11g/R2/linux.x64_11gR2_database_2of2.zip 1、安装依赖 使⽤ root ⽤户执⾏，直接安装以下依赖包  The following or later version of packages for Oracle Linux 7, and Red Hat Enterprise Linux 7 must be installed: yum -y install binutils compat-libcap1 compat-libstdc++-33 compat-libstdc++-33*i686 compat-libstdc++-33*.devel compat-libstdc++-33 compat-libstdc++-33*.devel gcc gcc-c++ glibc glibc*.i686 glibc-devel glibc-devel*.i686 ksh libaio libaio*.i686 libaio-devel libaio-devel*.devel libgcc libgcc*.i686 libstdc++ libstdc++*.i686 libstdc++-devel libstdc++-devel*.devel libXi libXi*.i686 libXtst libXtst*.i686 make sysstat unixODBC unixODBC*.i686 unixODBC-devel unixODBC-devel*.i686 unzip vim 参考官方：http://docs.oracle.com/cd/E11882_01/install.112/e24326/toc.htm#BHCCADGD 2、⽤户和组准备 使⽤ root ⽤户执⾏ # 数据库安装组 groupadd oinstall # 数据库管理员组 groupadd dba # -g 表示为用户指定一个主 group，-G 表示为用户指定一个副 group，平时主要是 oinstall 组发生作用 useradd -g oinstall -G dba -d /home/oracle oracle # 为管理员用户 oracle 设置密码 passwd oracle  3、⽬录准备及权限调整 使⽤ root ⽤户执⾏ # 数据库系统安装⽬录 mkdir -p /home/oracle/app/oracle # 数据库数据安装⽬录 mkdir -p /home/oracle/app/oracle/data/oradata # 数据备份⽬录 mkdir -p /home/oracle/app/oracle/data/oradata_back # 清单⽬录 mkdir /home/oracle/inventory chown -R oracle:oinstall /home/oracle/app/oracle chown -R oracle:oinstall /home/oracle/inventory chown -R oracle:oinstall /home/oracle/app/oracle/data chmod -R 775 /home/oracle/app/oracle chmod -R 775 /home/oracle/app/oracle/data 4、内核参数调整 使⽤ root ⽤户执⾏：vim /etc/sysctl.conf # 在⽂件最后新增: fs.aio-max-nr = 1048576 fs.file-max = 6815744 kernel.shmall = 2097152 kernel.shmmax = 2147483648 kernel.shmmni = 4096 kernel.sem = 250 32000 100 128 net.ipv4.ip_local_port_range = 9000 65500 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048586 使之⽣效：/sbin/sysctl -p 5、⽤户的限制⽂件修改 要改善 Linux 系统上的软件性能，必须对 Oracle 软件所有者用户（grid、oracle）增加以下资源限制 使⽤ root ⽤户执⾏：vim /etc/security/limits.conf # 在最后新增: oracle   soft nproc   2047 oracle   hard nproc   16384 oracle   soft nofile  1024 oracle   hard nofile  65536 oracle   soft stack   10240 Shell 限制 limits.conf 中的条目 硬限制 打开文件描述符的最大数 nofile 65536 可用于单个用户的最大进程数 nproc 16384 进程堆栈段的最大大小  stack 10240 修改文件：vim /etc/pam.d/login # 在最后新增: session required /lib64/security/pam_limits.so session required pam_limits.so 对默认的 shell 启动文件进行以下更改，以便更改所有 Oracle 安装所有者的 ulimit 设置： vim /etc/profile # 在最后新增: if [ $USER = oracle ]; then if [ $SHELL = /bin/ksh ]; then  ulimit -p 16384  ulimit -n 65536 else  ulimit -u 16384 -n 65536 fi fi 使之⽣效：source /etc/profile 6、环境配置 使用 root 用户执行 修改主机名，本机改为 DB：vim /etc/hostname 添加主机名与 IP 对应记录：vim /etc/hosts 192.168.33.131 tDB 禁用 selinux，将 SELINUX=enforcing 改为 SELINUX=disabled 后重启服务器：vim /etc/selinux/config # 重启后查看 SELinux 状态（enabled 即为开启状态） /usr/sbin/sestatus -v # 开放 1521 端口 firewall-cmd --zone=public --add-port=1521/tcp --permanent # 重启防火墙 firewall-cmd --reload  使⽤ oracle ⽤户执⾏：su - oracle vim ~/.bash_profile # 在最后新增如下，注意其中的 ORACLE_BASE 和 ORACLE_HOME 也在应答⽂件中有设置，要保持⼀致 export LANG=en_US.UTF-8 export ORACLE_BASE=/home/oracle/app/oracle export ORACLE_HOME=$ORACLE_BASE/product/11gr2/dbhome_1 export ORACLE_SID=orcl PATH=/usr/sbin:$PATH:$ORACLE_HOME/bin export PATH 使之⽣效：source ~/.bash_profile 7、使用应答⽂件静默安装 oracle 使⽤ oracle ⽤户下执⾏：su - oracle # 解压安装包后得到⼀个 database 的⽂件夹 unzip linux.x64_11gR2_database_1of2.zip unzip linux.x64_11gR2_database_2of2.zip # 在复制的 demo 应答⽂件基础上修改 cp /home/oracle/response/db_install.rsp /home/oracle/database/response/my_db_install.rsp   文件  作用     db_install.rsp  静默安装 Oracle Database 11g，安装应答    grid_install.rsp  静默安装 Oracle Grid Infrastructure    dbca.rsp  静默安装 Database Configuration Assistant，创建数据库应答    netca.rsp  静默安装 Oracle Net Configuration Assistant，建立监听、本地服务名等网络设置的应答   部分参数说明，按需修改：vim /home/oracle/response/my_db_install.rsp # 安装类型：INSTALL_DB_SWONLY（只装数据库软件）、INSTALL_DB_AND_CONFIG（安装并配置数据库）、UPGRADE_DB（更新数据库） oracle.install.option=INSTALL_DB_SWONLY # 主机名称（命令 hostname 查询） ORACLE_HOSTNAME=DB # 安装组 UNIX_GROUP_NAME=oinstall # 指定 INVENTORY 目录 INVENTORY_LOCATION=/home/oracle/inventory # 指定查询语言 SELECTED_LANGUAGES=en，zh_CN # oracle_home 路径根据目录情况注意修改 ORACLE_HOME=/home/oracle/app/oracle/product/11gr2/dbhome_1 # oracle_base 路径根据目录情况注意修改 ORACLE_BASE=/home/oracle/app/oracle # oracle 版本：EE：企业版 (Enterprise Edition)、SE：标准版 (Standard Edition) # SEONE：标准版第二版 (Standard Edition One)、PE：个人版 (Personal Edition) 仅 windows 系统有 oracle.install.db.InstallEdition=EE # 自定义安装，否，使用默认组件 oracle.install.db.isCustomInstall=false # dba 用户组 oracle.install.db.DBA_GROUP=dba # oper 用户组 oracle.install.db.OPER_GROUP=dba # 数据库类型 oracle.install.db.config.starterdb.type=GENERAL_PURPOSE oracle.install.db.config.starterdb.globalDBName=orcl # 此处注意与环境变量内配置 SID 一致 oracle.install.db.config.starterdb.SID=orcl # 通常中文选择的有 ZHS16GBK 简体中文库，建议选择 unicode 的 AL32UTF8 国际字符集 oracle.install.db.config.starterdb.characterSet=AL32UTF8 # 指定 Oracle 自动管理内存的大小，最小是 256MB oracle.install.db.config.starterdb.memoryLimit=1500 # 是否启用安全设置 oracle.install.db.config.starterdb.enableSecuritySettings=true # 设定所有数据库用户使用同一个密码，其它数据库用户就不用单独设置了 oracle.install.db.config.starterdb.password.ALL=ora1234! # 数据库本地管理工具 DB_CONTROL，远程集中管理工具 GRID_CONTROL oracle.install.db.config.starterdb.control=DB_CONTROL # 设置自动备份 oracle.install.db.config.starterdb.automatedBackup.enable=false # 自动备份会启动一个 job，指定启动 job 的系统用户 ID oracle.install.db.config.starterdb.automatedBackup.osuid= # 自动备份会开启一个 job，需要指定 OSUser 的密码 oracle.install.db.config.starterdb.automatedBackup.ospwd= # 自动备份使用的文件系统存放数据库文件还是 ASM oracle.install.db.config.starterdb.storageType= # 使用文件系统存放数据库文件才需要指定备份恢复目录 oracle.install.db.config.starterdb.fileSystemStorage.recoveryLocation= # 禁用安全更新 DECLINE_SECURITY_UPDATES=true 开始安装前先检查 swap 内存大小和磁盘大小是否够用，不够的话需要增加 swap 大小和磁盘，详见文章底部 # 注意：重装 Oracle 时执⾏前 /home/oracle/inventory 下不能有内容， 否则会报错 [INS-32035]， 重装的时候要清空此⽬录 rm -rf /home/oracle/inventory/* # 执⾏安装 /home/oracle/database/runInstaller -silent -debug -force -responseFile /home/oracle/database/response/my_db_install.rsp 执⾏一段时间后提示需要 root ⽤户执⾏两个脚本时，即为安装成功： 使⽤ root ⽤户执⾏两个脚本 /home/oracle/inventory/orainstRoot.sh /home/oracle/app/oracle/product/11gr2/dbhome_1/root.sh  8、使用数据库应答文件创建数据库 使⽤ oracle ⽤户执⾏：su - oracle # 在 demo 应答⽂件基础上修改 cp /home/oracle/database/response/dbca.rsp /home/oracle/database/response/my_dbca.rsp 修改应答⽂件中的内容：vim /home/oracle/database/response/my_dbca.rsp # 创建数据库 OPERATION_TYPE = createDatabase # 全局数据库名称 GDBNAME = orcl11g # 数据库实例 SID SID = orcl # sys 用户的密码 SYSPASSWORD = ora1234! # system 用户的密码 SYSTEMPASSWORD = ora1234! # 数据文件位置 DATAFILEDESTINATION = /home/oracle/app/oracle/data/oradata # 恢复区位置 RECOVERYAREADESTINATION = /home/oracle/app/oracle/data/oradata_back # 可选 SYSDBAUSERNAME = system SYSDBAPASSWORD = ora1234! INSTANCENAME = orcl11g # 数据库的字符集，按需求设置，ZHS16GBK 采用 2 个字符存储，而 AL32UTF8 采用 3-4 个字符存储，效率不同 # AL32UTF8 是 utf8 字符集，适用于中文、韩语、日语等等不同的语言使用 # ZHS16GBK 是中文字符集，只能存储中文和英文字符，存储韩文则显示为乱码（没有编码） CHARACTERSET = AL32UTF8 # 数据库的国家字符集，可选 UTF8 or AL16UTF16，建议 UTF-8 NATIONALCHARACTERSET= UTF8 # 为 Oracle 分配的内存(MB) TOTALMEMORY = 10240 # 字符集（CHARACTERSET）：  (1) 用来存储 CHAR， VARCHAR2， CLOB， LONG 等类型数据  (2) 用来标示诸如表名、列名以及 PL/SQL 变量等  (3) 用来存储 SQL 和 PL/SQL 程序单元等 命名遵循以下命名规则：&lt;Language&gt;&lt;bitsize&gt;&lt;encoding&gt; 即: &lt;语言&gt;&lt;比特位数&gt;&lt;编码&gt; AL32UTF8：AL，代表 all，指使用所有语言；32，32 位；UTF8 编码 # 国家字符集（NATIONALCHARACTERSET）：  (1) 用以存储 NCHAR， NVARCHAR2， NCLOB 等类型数据  (2) 国家字符集实质上是为 oracle 选择的附加字符集，主要作用是为了增强 oracle 的字符处理能力，因为   tNCHAR 数据类型可以提供对亚洲使用定长多字节编码的支持，而数据库字符集则不能。国家字符集在 oracle9i  t中进行了重新定义，只能在 unicode 编码中的 UTF8 和 AF16UTF16中选择，默认值是 AF16UTF16 使⽤ dbca 静默建库： cd /home/oracle/database/response dbca -silent -responseFile /home/oracle/database/response/my_dbca.rsp  9、配置监听 使⽤ oracle ⽤户执⾏：su - oracle # 执⾏完成后，会在 $ORACLE_HOME/network/admin ⽬录下⽣成 sqlnet.ora 和 listener.ora 两个⽂件 cd /home/oracle/database/response netca /silent /responsefile /home/oracle/database/response/netca.rsp 注册 sid：vim $ORACLE_HOME/network/admin/listener.ora # 1、将 LISTENER 中 HOST 修改为主机名 # 2、添加以下内容，(PROGRAM = extproc) 需要注释掉，否则后⾯会导致客户端⽆法连接，连接时报错：ORA-12514，sid_name 与应答文件中一致 SID_LIST_LISTENER = (SID_LIST =  (SID_DESC =  t (SID_NAME = orcl)   t (ORACLE_HOME = /home/oracle/app/oracle/product/11gr2/dbhome_1)  t #(PROGRAM = extproc)   t ) )  修改后重启监听：lsnrctl reload 查看监听状态：lsnrctl status 使⽤ sqlplus 本机测试：sqlplus / as sysdba -- 查看实例状态 SQL&gt; select status from v$instance;  10、配置数据库 -- 查看 sid SQL&gt; show parameter instance_name;  修改数据库最⼤连接数和密码有效期 -- 当前的数据库连接数 SQL&gt; select count(*) from v$process; -- 查询最大连接数，默认为 150 SQL&gt; show parameter processes; -- 修改最大连接数 SQL&gt; alter system set processes = 2000 scope = spfile; -- 关闭数据库实例 SQL&gt; shutdown immediate; -- 启动数据库实例 SQL&gt; startup; -- 查询密码有效期，默认为 180 天 SQL&gt; SELECT * FROM dba_profiles s WHERE s.profile='DEFAULT' AND resource_name='PASSWORD_LIFE_TIME'; -- 密码有效期修改为无限期，无需重启数据库 SQL&gt; ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;  11、设置开机自启 进入 oracle 用户下，修改启动脚本如下：vim $ORACLE_HOME/bin/dbstart 修改关闭脚本如下：vim $ORACLE_HOME/bin/dbshut 修改 oratab 选线，将 N 改成 Y：vim /etc/oratab 进入 root 用户，修改配置：vim /etc/rc.d/rc.local # 在末尾加上 oracle 自带的 dbstart 启动脚本 su - oracle -lc /home/oracle/app/oracle/product/11gr2/dbhome_1/bin/dbstart  添加执行权限：chmod +x /etc/rc.d/rc.local 二、可能遇到的问题 1、重装 Oracle 当再次执⾏安装命令时，会报错  SEVERE: [FATAL] [INS-32025] The chosen installation conflicts with software already installed in the given Oracle home. 解决⽅法: 删除下的所有内容，然后再试：`vi /home/oracle/inventory/ContentsXML/inventory.xml` 2、plsql 连接报错  ORA-12514: TNS:listener does not currently know of service requested in connect descriptor 检查 $ORACLE_HOME/network/admin/listener.ora 配置 配置监听配置了 SID_LIST_LISTENER 其中的 sid 有没有写错 3、重启监听时报错  TNS-01201: Listener cannot find executable homeoracleapporaclebinoracle for SID zzwx 检查 $ORACLE_HOME 是否与 listener.ora 中的配置⼀致， 这个报错是由于没有找到正确的 $ORACLE_HOME 导致， 修改 listener.ora 中的 ORACLE_HOME 解决 4、检测环境报错  [FATAL] [INS-13013] Target environment do not meet some mandatory requirements 这种报错表示环境检测有的不满⾜， 要看具体情况， 对不是必要的条件不满⾜， 可以选择忽略. 在 安装命令中增加 -ignorePrereq .runInstaller -silent -ignorePrereq -debug -force -responseFile /home/oracle/database/response/my_db_install.rsp  5、swap 报错  ./runInstaller -silent -debug -force -responseFile /home/oracle/database/response/my_db_install.rsp Starting Oracle Universal Installer… Checking Temp space: must be greater than 120 MB. Actual 38285 MB Passed Checking swap space: 0 MB available, 150 MB required. Failed «« Some requirement checks failed. You must fulfill these requirements before continuing with the installation, Exiting Oracle Universal Installer, log for this session can be found at /tmp/OraInstall20190-03-19_12-19-38PM/installActions2019-03-19_12-19-38PM.log 解决方法： ① 检查 Swap 空间在设置 Swap 文件之前，有必要先检查一下系统里有没有既存的 Swap 文件。运行以下命令： swapon -s 如果返回的信息概要是空的，则表示 Swap 文件不存在 如果有则需要先关闭 swap 分区：swapoff -a，修改完成后再开启 swap 分区：swapon -a swapoff -a  ② 检查文件系统在设置 Swap 文件之前，同样有必要检查一下文件系统，看看是否有足够的硬盘空间来设置 Swap 。运行以下命令： df -hal ③ 创建并允许 Swap 文件下面使用 dd 命令来创建 Swap 文件。检查返回的信息，还剩余足够的硬盘空间即可。 dd if=/dev/zero of=/swapfile bs=1024 count=3072k 参数说明： if=filename：输入文件名，缺省为标准输入。即指定源文件。 &lt; if=input file &gt; of=filename：输出文件名，缺省为标准输出。即指定目的文件。 &lt; of=output file &gt; bs=bytes：同时设置读入/输出的块大小为 bytes 个字节 count=blocks：仅拷贝 blocks 个块，块大小等于 bs 指定的字节数 ④ 格式化并激活 Swap 文件上面已经创建好 Swap 文件，还需要格式化后才能使用。运行命令： mkswap /swapfile 激活 Swap ，运行命令开启 swap 分区： swapon /swapfile  以上步骤做完，再次运行命令： swapon -s 你会发现返回的信息概要： 如果要机器重启的时候自动挂载 Swap ，那么还需要修改 fstab 配置，在其最后添加如下一行：vi /etc/fstab /swapfile  swap  swap defaults  0 0 最后，赋予 Swap 文件适当的权限： chown root:root /swapfile chmod 0600 /swapfile 6、plsql 查询数据乱码 -- 查询 oracle server 端的字符集 SQL&gt; select userenv('language') from dual; USERENV('LANGUAGE') ---------------------------------------------------- AMERICAN_AMERICA.AL32UTF8 添加 NLS_LANG 为系统环境变量，与查询结果保持一致，重启plsql 7、修改字符集 导入 dmp 文件时需要 oracle server 端、client 端和 dmp 文件的字符集都一致才能正确导入 ZHS16GBK 修改字符集为 AL32UTF8：sqlplus / as sysdba SQL&gt; shutdown immediate; SQL&gt; STARTUP MOUNT; SQL&gt; ALTER SESSION SET SQL_TRACE=TRUE; SQL&gt; ALTER SYSTEM ENABLE RESTRICTED SESSION; SQL&gt; ALTER SYSTEM SET JOB_QUEUE_PROCESSES=0; SQL&gt; ALTER SYSTEM SET AQ_TM_PROCESSES=0; SQL&gt; ALTER DATABASE OPEN; SQL&gt; ALTER DATABASE character set INTERNAL_USE AL32UTF8; SQL&gt; ALTER SESSION SET SQL_TRACE=FALSE; SQL&gt; shutdown immediate; SQL&gt; startup; SQL&gt; select userenv('language') from dual; USERENV('LANGUAGE') ---------------------------------------------------- AMERICAN_AMERICA.AL32UTF8 -- 查看变更记录 SQL&gt; SELECT parameter, value FROM v$nls_parameters WHERE parameter LIKE '%CHARACTERSET'; PARAMETER ---------------------------------------------------------------- VALUE ---------------------------------------------------------------- NLS_CHARACTERSET AL32UTF8 NLS_NCHAR_CHARACTERSET UTF8 字符集相关资料：  Oracle 字符集的查看和修改   ORACLE HANDBOOK 系列之十：字符集、编码以及 Oracle 的那些事 ",
      "url"      : "https://blog.nine.gt.tc/2020/03/18/oracle11g-silent-install/",
      "keywords" : "Oracle, Linux, Centos"
    } ,
  
    {
      "title"    : "Git 基础",
      "category" : "Git",
      "content": "Git 基础知识介绍 1、Git 与 Github 的区别  Git 是一个分布式版本控制系统，简单的说其就是一个软件，用于记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的软件。   Github（https://www.github.com）是一个为用户提供 Git 服务的网站，简单说就是一个可以放代码的地方（不过可以放的当然不仅是代码）。Github 除了提供管理 Git 的 web 界面外，还提供了订阅、关注、讨论组、在线编辑器等丰富的功能。Github 被称之为全球最大的基友网站。 2、本地仓库 2.1、工作流程 Git 本地操作的三个区域：  工作区：本地电脑存放项目文件的地方； 暂存区（Index/Stage）：在使用 git 管理项目文件的时候，其本地的项目文件会多出一个 .git 的文件夹，将这个 .git 文件夹称之为版本库。其中 .git 文件夹中包含了两个部分，一个是暂存区（Index/Stage），顾名思义就是暂时存放文件的地方，通常使用 add 命令将工作区的文件添加到暂存区里； 本地仓库：.git 文件夹里还包括 git 自动创建的 master 分支，并且将HEAD指针指向 master 分支。使用 commit 命令可以将暂存区中的文件添加到本地仓库中；  工作流程： 2.2、本地仓库操作 仓库又名版本库，英文名 repository ，我们可以简单理解成是一个目录，用于存放代码的，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除等操作 Git 都能跟踪到。 ① 在安装好后首次使用需要先进行全局配置 桌面空白处右键，点击 Git Bash Here 以打开 Git 命令行窗口 $ git config --global user.name 用户名 $ git config --global user.email 邮箱地址  ② 创建仓库，创建一个文件夹，进入文件夹内，将git仓库初始化：git init，初始化成功后会在该目录下有 .git 名字的隐藏文件夹 ③ Git 常用指令操作 查看当前状态：git status 【非必要】 添加到暂存区：git add 文件名 提交至版本库：git commit -m 注释内容 # 语法 git add 文件名 git add 文件名1 文件名2 文件名3 … git add . t t //添加当前目录到缓存区中 在后续对于文件（可以操作 1 个或多个）操作之后，重复使用 git add 与 git commit 指令即可 2.3、版本回退 版本回退分为两步骤进行操作： ① 查看版本，确定需要回到的时刻点  t t t指令：git log、git log --pretty=oneline ② 回退操作 ​ t t t指令：git reset --hard 提交编号 ③ 查看历史操作，以得到最新的 commit id 指令：git reflog 2.4、忽略文件 忽略文件需要新建一个名为 .gitignore 的文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录及其子目录生效。  PS：该文件因为没有文件名，无法直接在 windows 目录下直接创建，可以通过命令行 Git Bash 来touch创建 常见规则写法有如下几种： 1）/mtk/   过滤整个文件夹 2）*.zip   过滤所有.zip 文件 3）/mtk/do.c   过滤某个具体文件 4) !index.php t  不过滤具体某个文件 3、两种常规使用方式 3.1、基于 http/https 协议 a. 使用 clone 指令克隆线上仓库到本地 语法： git clone 线上仓库地址 b. 在仓库上做对应的操作（提交暂存区、提交本地仓库、提交线上仓库、拉取线上仓库） 将本地仓库同步到 git 远程仓库中：git push 在 push 前需要修改 .git/config 文件内容： [core]  trepositoryformatversion = 0  tfilemode = false  tbare = false  tlogallrefupdates = true  tsymlinks = false  tignorecase = true [remote origin]  turl = https://用户名:密码@github.com/用户名/仓库名.git  tfetch = +refs/heads/*:refs/remotes/origin/* [branch master]  tremote = origin  tmerge = refs/heads/master  拉取线上仓库：git pull 3.2、基于 ssh 协议 生成公私玥对指令：ssh-keygen -t rsa -C 注册邮箱 上传公钥文件内容（id_rsa.pub）到 github 中，clone 远程仓库 # 查看分支 git branch # 创建分支 git branch 分支名 # 切换分支 git checkout 分支名 # 删除分支 git branch -d 分支名 # 合并分支 git merge 被合并的分支名 查看、创建分支： 切换分支、合并分支、删除分支： 将 master 分支提交到远程仓库 4、解决冲突 多人开发同一个项目时，如果两个人修改了同一个文件同一个地方，push 时会发生冲突 解决方式：git pull -&gt; 手动解决冲突 -&gt;git push ",
      "url"      : "https://blog.nine.gt.tc/2020/04/22/git-basis/",
      "keywords" : "Git, Github"
    } ,
  
    {
      "title"    : "Linux 下安装 Redis",
      "category" : "Redis",
      "content": "Linux 下编译安装 Redis 以及使用脚本安装 1、编译安装 Redis # 下载解压文件 wget http://download.redis.io/releases/redis-5.0.7.tar.gz tar -zxvf redis-5.0.7.tar.gz # 安装依赖 yum -y install gcc gcc-c++ tcl # 编译 redis6.x 需要高版本的 gcc yum -y install centos-release-scl yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils source /opt/rh/devtoolset-9/enable echo source /opt/rh/devtoolset-9/enable &gt;&gt;/etc/profile gcc --version # 编译 redis 源码 cd redis-5.0.7 make -j2 # 安装到指定目录 cd src make -j2 install PREFIX=/usr/local/redis  2、配置 redis # 移动配置文件到安装目录下 mkdir /usr/local/redis/etc mv ../redis.conf /usr/local/redis/etc 修改配置文件：vim /usr/local/redis/etc/redis.conf # 配置 redis 为后台启动 # 将 daemonize no 改成 daemonize yes # 在 bind 127.0.0.1 后添加本机 ip 供局域网访问 # 将 requirepass foobared 改为 requirepass 1234，1234 为 redis 密码  # 创建软连接，让 redis-server、redis-cli 可以在任意目录下直接使用 ln -s /usr/local/redis/bin/redis-server /usr/local/bin/ ln -s /usr/local/redis/bin/redis-cli /usr/local/bin/ # 启动 redis redis-server /usr/local/redis/etc/redis.conf # 开放6379端口，重启防火墙 firewall-cmd --zone=public --add-port=6379/tcp --permanent systemctl restart firewalld 3、设置开机自启  方法一 # 在 /etc/rc.local 末尾添加一行内容 echo '/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf' &gt;&gt; /etc/rc.d/rc.local # 添加执行权限 chmod +x /etc/rc.d/rc.local 方法二 添加启动文件：vim /lib/systemd/system/redis.service，写入以下配置 [Unit] Description=The redis-server Process Manager Documentation=https://redis.io/ After=network.target [Service] Type=forking ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf # 有密码则需要在 redis-cli 后面加 -a 密码 ExecStop=/usr/local/redis/bin/redis-cli -a 1234 shutdown [Install] WantedBy=multi-user.target # 设置开机自启动 systemctl enable redis # 开启服务 systemctl start redis # 停止服务 systemctl stop redis # 查看运行状态 systemctl status redis 可能遇到的问题： make 时，发生以下错误，使用make MALLOC=libc执行 ",
      "url"      : "https://blog.nine.gt.tc/2020/07/08/centos-install-redis/",
      "keywords" : "Linux, Redis"
    } ,
  
    {
      "title"    : "Windows 上使用 OpenSSH 服务",
      "category" : "OpenSSH",
      "content": "在 Windows 上配置使用 OpenSSH 服务 1、OpenSSH 简介 OpenSSH 是安全 Shell (SSH) 工具的开放源代码版本，Linux 及其他非 Windows 系统的管理员使用此类工具跨平台管理远程系统。SSH 基于客户端-服务器体系结构，用户在其中工作的系统是客户端，所管理的远程系统是服务器。 OpenSSH 包含一系列组件和工具，用于提供一种安全且简单的远程系统管理方法，其中包括：  sshd.exe，它是远程所管理的系统上必须运行的 SSH 服务器组件 ssh.exe，它是在用户的本地系统上运行的 SSH 客户端组件 ssh-keygen.exe，为 SSH 生成、管理和转换身份验证密钥 ssh-agent.exe，存储用于公钥身份验证的私钥 ssh-add.exe，将私钥添加到服务器允许的列表中 ssh-keyscan.exe，帮助从许多主机收集公用 SSH 主机密钥 sftp.exe，这是提供安全文件传输协议的服务，通过 SSH 运行 scp.exe 是在 SSH 上运行的文件复制实用工具 从 Windows 10 1809 和 Windows Server 2019 开始 Windows 开始支持 OpenSSH Server，其它版本需要额外安装 2、下载 OpenSSH 本机为 windows 2016，根据不同的系统下载不同的压缩包，如果是 64 位系统，选择 32 位也可以：https://github.com/PowerShell/Win32-OpenSSH/releases，解压到 C:  Program Files 目录下，重命名为 OpenSSH，将 OpenSSH 目录加入 PATH 系统环境变量中： 3、安装 OpenSSH # 使用管理员运行命令提示符在本 OpenSSH 目录下安装服务 powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1 # 在防火墙入站规则中开放 22333 端口或执行以下命令，服务器安全组开放 22333 端口 netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22333 # 启动 ssh 服务，会在 C:  ProgramData   下生成 ssh 目录 net start sshd # 修改 C:  ProgramData  ssh  sshd_config 文件默认端口号为 22333 后重启 ssh 服务 net stop sshd net start sshd # 配置开机自启 sshd 服务 sc config sshd start= auto  4、测试连接 ssh 连接成功，默认会进入 windows 的命令行下（cmd） 可以把默认的 shell 设置为 PowerShell，以管理员运行 PowerShell 执行： New-ItemProperty -Path HKLM:  SOFTWARE  OpenSSH -Name DefaultShell -Value C:  Windows  System32  WindowsPowerShell  v1.0  powershell.exe -PropertyType String -Force  执行后会在注册表HKEY_LOCAL_MACHINE  SOFTWARE  OpenSSH下添加一条 DefaultShell 字符串值，删除后恢复为原来默认 shell，下次登陆时会进入 PowerShell 下 也可使用 Xshell、FlashFXP 等工具进行连接，传输文件时比远程桌面直接复制更方便 5、配置ssh免密登录 1)、生成SSH密钥 默认加密方式为dsa，使用参数 -t 指定 rsa 加密方式先在本地生成秘钥 2)、将公钥上传到服务器.ssh目录下 PowerShell 中没有 ssh-copy-id 命令，手动将本地的 .ssh 目录上传到 windows 服务器用户目录下（避免文件权限问题），删除id_rsa 和 known_hosts 并将 id_rsa.pub 重命名为 authorized_keys 3)、修改 ssh 服务的配置文件 修改服务器 C:  ProgramData  ssh 目录下的 sshd_config 文件，注释最后两行内容 若有安全级别较高可以将 PasswordAuthentication 改成 no（不允许密码登录，只能通过秘钥登录）： # Match Group administrators #  AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys 重启 sshd、sshd-agent 服务，并将启动类型改为自动 使用 Xshell 测试 ",
      "url"      : "https://blog.nine.gt.tc/2020/11/21/windows-install-openssh/",
      "keywords" : "Windows, OpenSSH"
    } ,
  
    {
      "title"    : "Centos7 下安装配置 MongoDB",
      "category" : "MongoDB",
      "content": "MongoDB 是免费开源的跨平台 NoSQL 数据库，命名源于英文单词 humongous，意思是「巨大无比」。与关系型数据库不同，MongoDB 的数据以类似于 JSON 格式的二进制文档存储 1、官方源安装 官方文档：https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/ # 设置官方安装源 vim /etc/yum.repos.d/mongodb-org-4.4.repo # 写入以下内容 [mongodb-org-4.4] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-4.4.asc # 安装 4.4 最新稳定版 yum install -y mongodb-org # 安装指定版本 yum install -y mongodb-org-4.4.13 # 启动MongoDB systemctl start mongod # 设置开机自启 systemctl enable mongod   包名  描述     mongodb-org  一个将自动安装以下四个组件包的组合包    mongodb-org-server  包含mongod守护程序，关联的init脚本和配置文件（/etc/mongod.conf）。您可以使用初始化脚本从mongod配置文件开始    mongodb-org-mongos  包含mongos守护进程    mongodb-org-shell  包含mongoshell    mongodb-org-tools  包含以下的MongoDB工具：mongoimport bsondump, mongodump, mongoexport, mongofiles, mongorestore, mongostat, 和 mongotop   2、修改配置 # 连接 mongo localhost:27017 # 进入 admin 数据库 use admin # 创建root用户 db.createUser({ user: root, pwd: db123456, roles: [{ role: userAdminAnyDatabase, db: admin }] }) # 测试密码 db.auth('root','db123456') 修改配置文件：vim /etc/mongod.conf # 开启密码验证 security: authorization: enabled # 修改默认端口，仅允许本机IP进行连接 net: port: 27027 bindIp: 127.0.0.1,192.168.159.138 # 重启服务 systemctl restart mongod # 登录测试 mongo -uroot 192.168.159.138:27027/admin -p # 用户查询 db.system.users.find() # 创建数据库 use test ## 创建 sr_db 数据库的用户 db.createUser({ user: db_user, pwd: db123456, roles: [{ role: readWrite, db: test_db }] }) # 删除用户 use test db.dropUser('test_db') 3、导入导出 # 备份 mongodump -h 192.168.159.138:27027 -u db_user -p=db123456 -d test_db -o /root/mongodb_bak/$(date +%Y%m%d) --authenticationDatabase test # 恢复 mongorestore -h 192.168.159.138:27027 -u db_user -p=db123456 -d test_db --drop --authenticationDatabase test /root/sr_db/ –drop 用于指定，恢复是如果对应数据库或者 colleciton 存在，则先删除然后在恢复 定时备份脚本：00 03 * * * /bin/bash /root/mongodb_bak/export_mongodb.sh &gt;&gt; /root/mongodb_bak/crontab.log 2&gt;&amp;1 #!/bin/bash echo start export in $(date +'%F %T') # 导出数据库 mongodump -h 192.168.159.138:27027 -u db_user -p=db123456 -d test_db -o /root/mongodb_bak/$(date +%Y%m%d) --authenticationDatabase test # 删除 30 天前的目录 find /root/mongodb_bak -mindepth 1 -maxdepth 1 -type d -mtime +30 -exec rm -rfv {}   ; echo end export in $(date +'%F %T') 4、登录报错 输入正确的密码后无法登录，报错如下 这是因为 SELinux 当前为enforcing模式，可改为disabled后重启服务器即可：vim /etc/selinux/config 或者采用官网文档进行配置 https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#configure-selinux ",
      "url"      : "https://blog.nine.gt.tc/2021/01/31/centos7-install-mongodb/",
      "keywords" : "Linux, Centos, MongoDB"
    } ,
  
    {
      "title"    : "PicGo 结合 GitHub 搭建图床",
      "category" : "GitHub",
      "content": "PicGo 结合 GitHub/Gitee 搭建图床，用于存储博客图片 1、安装 PicGo 下载地址：https://github.com/Molunerfinn/PicGo/releases，说明文档  安装插件需有 Node.js 环境，否则安装时会一直显示安装中 Gitee 上的图片目前已取消了外部链接访问，网站图片无法显示，仅本地可显示  2、新建图床仓库 在 GitHub 上新建一个公开的非空仓库（空仓库上传图片时会报 500 错误），然后在Settings / Developer settings下生成一个新 token 用于 PicGo 上传图片，权限勾选 repo 下所有选项 Gitee 则在设置 -&gt; 私人令牌下生成 3、图床设置 参数说明见插件文档 按 GitHub 仓库信息配置，自定义域名使用 jsdeliver 的 cdn： 按 Gitee 仓库信息配置：  customPath 选择 default ，则实际的 path 值为 linux  customPath 选择年，则实际的 path 值为 linux/2021  customPath 选择年季，则实际的 path 值为 linux/2021/summer  customPath 选择年月，则实际的 path 值为 linux/2021/02 4、图片上传 上传区选择 GitHub 或 Gitee，文件会上传至仓库 linux 文件夹下，上传后可在相册下查看和删除（远程仓库也会同步删除）。 5、结合 Typora 使用 在文件 -&gt; 偏好设置 -&gt; 图像设置下配置上传服务设定： 点击验证图片上传选项，上传成功。 对于 md 文件内的本地或其它外链图片，也可单独或者上传全部图片到远程仓库中。 慎用上传所有本地图片，图片较多时会打乱图片在文章中的位置，应该是 Typora 的 bug ",
      "url"      : "https://blog.nine.gt.tc/2021/02/07/picgo-github-cloudimg/",
      "keywords" : "Picgo, GitHub, Gitee, 图床"
    } ,
  
    {
      "title"    : "Docker 本地部署 Jekyll 静态博客",
      "category" : "Docker",
      "content": "使用 Docker 本地部署 Jekyll 项目，可供服务器上搭建个人博客、本地实时预览调试代码。 # 拉取项目 git clone https://github.com/NineHolic/nineholic.github.io cd nineholic.github.io # 构建镜像 docker build -t nine_blog:20241031 . # 查看镜像 docker images # 使用宿主机端口启动容器，并在修改源文件时自动重新构建 docker run --network host --name blog -v $(pwd):/blog nine_blog:20241031 bash -c jekyll serve -w --host=192.168.216.128 # 开放端口 firewall-cmd --zone=public --permanent --add-port=4000/tcp firewall-cmd --reload Dockerfile 文件内容： # 使用 Ruby 官方镜像作为基础镜像 FROM ruby:3.3.4 # 创建一个新的目录用于存放 Jekyll 网站 RUN mkdir /blog WORKDIR /blog # 安装依赖 COPY Gemfile /blog RUN bundle config mirror.https://rubygems.org https://mirrors.tuna.tsinghua.edu.cn/rubygems RUN bundle install --verbose # 容器启动时执行的命令 CMD jekyll --version 浏览器访问查看效果：http://192.168.216.128:4000 镜像使用版本参考：Github Pages 运行环境 ",
      "url"      : "https://blog.nine.gt.tc/2021/05/18/blog-with-jekyll/",
      "keywords" : "Jekyll, Docker, Blog"
    } ,
  
    {
      "title"    : "Centos7 升级 OpenSSH",
      "category" : "OpenSSH",
      "content": "Centos7.6 升级后测试 ssh 登录及重启后 ssh 登录均无问题，升级无需卸载原先的 openssl 和 openssh 系统环境为服务器安装镜像时自带的 openssh，没有经历过手动编译安装方式 1、升级准备 升级前版本 升级后版本  注意事项： 升级前先关闭 selinux 使用 telnet 登录升级，备份ssh 相关文件，避免失败时无法回退版本 先在相同版本的测试环境进行升级，ssh 服务重启、服务器重启、su 切换用户等无问题后再到生产环境操作 先使用 yum 升级到目前 yum 仓库默认的 openssh7.4p1 版本，再进行编译安装升级到 openssh8.6p1 yum -y update openssh  关闭 selinux：vim /etc/selinux/config，将SELINUX=enforcing改为SELINUX=disabled 重启服务器：shutdown -r now 2、安装配置 telnet 防止SSH远程控制时，升级过程中出现连接中断，可通过telnet备用方式进行远程连接（由于telnet是明文传输，不安全，只作为临时使用，升级完成后，必须停止卸载该服务） yum -y install xinetd telnet-server 修改配置文件：vim /etc/xinetd.d/telnet # default: on # # description: The telnet server serves telnet sessions; it uses    # # unencrypted username/password pairs for authentication. service telnet { disable  = yes flags  = REUSE socket_type = stream    wait  = no user  = root server = /usr/sbin/in.telnetd log_on_failure += USERID } 配置 telnet 登录的终端类型：vim /etc/securetty，再文件末尾增加一些 pts 终端 pts/0 pts/1 pts/2 pts/3 设为开机自动启动 systemctl enable xinetd systemctl enable telnet.socket systemctl start telnet.socket systemctl start xinetd # 查看服务是否启动 netstat -lntp|grep 23  测试 telnet 登录 以下升级操作均在 telnet 终端下操作，防止 ssh 连接意外中断造成升级失败 3、升级 openssl # 安装依赖包 yum -y install gcc gcc-c++ glibc make autoconf openssl openssl-devel pcre-devel pam-devel yum -y install pam* zlib* # 下载解压 openssl 包 wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz tar -zxvf openssl-1.1.1g.tar.gz # 备份 openssl (存在就备份) mv /usr/bin/openssl /usr/bin/openssl_bak mv /usr/include/openssl /usr/include/openssl_bak # 编译安装 openssl cd openssl-1.1.1g ./config --prefix=/usr/ --openssldir=/usr/ shared make -j2 &amp;&amp; make -j2 install # 查看最后的命令 make install 是否有报错，0 表示无问题 echo $? # 查看升级后的 openssl 版本 openssl version  4、升级 openssh # 下载解压 openssh 包 wget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-8.6p1.tar.gz tar -zxvf openssh-8.6p1.tar.gz chown -R root:root openssh-8.6p1 # 备份ssh mv /etc/ssh /etc/ssh.bak mv /usr/bin/ssh /usr/bin/ssh.bak mv /usr/sbin/sshd /usr/sbin/sshd.bak # 编译安装 openssh cd openssh-8.6p1 ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-ssl-dir=/usr/local/ssl --with-md5-passwords --with-pam --with-zlib --with-tcp-wrappers --without-hardening make -j2 &amp;&amp; make -j2 install # 查看最后的命令 make install 是否有报错 echo $? # 授权 chmod 600 /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_ecdsa_key /etc/ssh/ssh_host_ed25519_key # 从原先的解压的包中拷贝一些文件到目标位置 cp -a contrib/redhat/sshd.init /etc/init.d/sshd cp -a contrib/redhat/sshd.pam /etc/pam.d/sshd.pam chmod u+x /etc/init.d/sshd # 将原先 systemd 管理的 sshd 文件删除或者移走，否则会影响重启 sshd 服务 mv /usr/lib/systemd/system/sshd.service /usr/lib/systemd/system/sshd.service.bak # 修改 ssh 配置 vim /etc/ssh/sshd_config UseDNS no UsePAM yes PermitRootLogin yes PasswordAuthentication yes # 设置开机自启 chkconfig --add sshd chkconfig sshd on # 重启 ssh 服务 systemctl daemon-reload systemctl restart sshd # 查看 ssh 状态 systemctl status sshd.service # 查看升级后的 openssh 版本 ssh -V  使用 systemd 方式测试 netstat -lntp systemctl stop sshd netstat -lntp systemctl start sshd netstat -lntp systemctl restart sshd netstat -lntp  telnet 测试 重启后再次测试均无问题，关闭 telnet systemctl disable xinetd.service systemctl stop xinetd.service systemctl disable telnet.socket systemctl stop telnet.socket netstat -lntp 5、版本回退 rm -rf /etc/ssh mv /etc/ssh.bak /etc/ssh mv /usr/bin/ssh.bak /usr/bin/ssh mv /usr/sbin/sshd.bak /usr/sbin/sshd systemctl restart sshd ssh -V 回退后注意验证ssh登录是否正常 ",
      "url"      : "https://blog.nine.gt.tc/2021/08/18/centos7-upgrade-openssh/",
      "keywords" : "Linux, Centos, OpenSSH"
    } ,
  
    {
      "title"    : "Centos7 安装 Elasticsearch",
      "category" : "Elasticsearch",
      "content": "Elasticsearch 是一个高度可伸缩的开源全文搜索和分析引擎。它可以快速和接近实时地存储、搜索和分析大量数据 1、安装 Elasticsearch # 下载安装 wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.12.0-x86_64.rpm rpm -ivh elasticsearch-7.12.0-x86_64.rpm 修改 ES 配置文件 elasticsearch.yml：vim /etc/elasticsearch/elasticsearch.yml cluster.name: scientific-research node.name: node-1 network.host: 192.168.0.250 http.port: 9200 cluster.initial_master_nodes: [node-1] # 设置开机自启 systemctl enable elasticsearch.service # 启动elasticsearch systemctl start elasticsearch # 查看状态 systemctl status elasticsearch # 开放端口 firewall-cmd --zone=public --permanent --add-port=9200/tcp firewall-cmd --reload 浏览器打开：http://192.168.0.250:9200，出现以下信息表示启动成功 2、安装ik分词器 下载与 ES 相同版本的 ik 分词器 # 安装 ik 分词器 cd /usr/share/elasticsearch/plugins mkdir ik cd ik wget https://github.com/medcl/elasticsearch-analysis- ik/releases/download/v7.12.0/elasticsearch-analysis-ik-7.12.0.zip unzip elasticsearch-analysis-ik-7.12.0.zip rm elasticsearch-analysis-ik-7.12.0.zip # 重启服务 systemctl restart elasticsearch 3、分词器的使用 # 使用 ES 内置分词器，只会将文字按个拆分 curl -H 'Content-Type: application/json' -XGET '192.168.0.250:9200/_analyze?pretty' -d '{text:飞流直下三千尺}' # 使用 analyzer-ik 分词器 curl -H 'Content-Type: application/json' -XGET '192.168.0.250:9200/_analyze?pretty' -d '{analyzer:ik_max_word,text:飞流直下三千尺}'  # 配置自定义词库 vim /usr/share/elasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml # 增加自定义词库 echo '三千尺' &gt; /usr/share/elasticsearch/plugins/ik/config/my.dic # 重启 es 服务 systemctl restart elasticsearch  使用自定义词库后的分词效果 4、head 插件安装 head 插件是 ES 的一个可视化管理插件，用来监视 ES 的状态，并通过 head 客户端和 ES 服务进行交互，比如创建映射、创建索引等。 安装方式见：https://github.com/mobz/elasticsearch-head 本文使用浏览器插件方式：https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm ",
      "url"      : "https://blog.nine.gt.tc/2021/11/17/centos7-install-elasticsearch/",
      "keywords" : "Elasticsearch, Linux, Centos"
    } ,
  
    {
      "title"    : "Centos7 下安装配置 Gitlab",
      "category" : "Gitlab",
      "content": "Centos7 下 Gitlab 的安装配置与备份恢复 1、Gitlab 介绍 GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。 GitLab 能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。 它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找 Gitlab 服务构成  Nginx：静态 web 服务器 gitlab-shell：用于处理 Git 命令和修改 authorized keys 列表 gitlab-workhorse: 轻量级的反向代理服务器 logrotate：日志文件管理工具 postgresql：数据库 redis：缓存数据库 sidekiq：用于在后台执行队列任务（异步执行） unicorn：An HTTP server for Rack applications，GitLab Rails 应用是托管在这个服务器上面的 gitlab-ee 和 gitlab-ce 的区别 关于 gitlab-ee（企业版）和 gitlab-ce（社区版），二者是基于同样的核心代码进行开发，只是 gitlab-ee 功能更强大，但需要付费使用，有 30 天试用期。但试用期过后如果不付费，它就跟 gitlab-ce 功能是完全一样的，只是需要付费的功能无法再继续使用而已。 2、安装 Gitlab 安装要求：https://docs.gitlab.com/ee/install/requirements.html # 安装依赖 yum install -y curl policycoreutils-python openssh-server perl # 启动ssh systemctl enable sshd systemctl start sshd # 将http和https加入防火墙策略，并重启防火墙。 systemctl start firewalld firewall-cmd --permanent --add-service=http firewall-cmd --permanent --add-service=https systemctl reload firewalld systemctl enable firewalld # 安装 postfix 发邮件功能，若使用外部 SMTP 服务器发送邮件可以不必安装 yum install -y postfix systemctl enable postfix systemctl start postfix   离线安装 rpm 镜像：https://packages.gitlab.com/gitlab/gitlab-ee # 下载安装 rpm 包，本机为 centos7 wget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ee/packages/el/7/gitlab-ee-14.6.0-ee.0.el7.x86_64.rpm/download.rpm rpm -ivh gitlab-ee-14.6.0-ee.0.el7.x86_64.rpm   在线安装 # 配置 gitlab-ce 的 yum 库 curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash # 在线安装gitlab-ee yum install -y gitlab-ee # 如果要安装指定的版本，在后面填上版本号即可 yum install -y gitlab-ee-14.6.0   3、修改配置 修改 Gitlab 主配置文件：vim /etc/gitlab/gitlab.rb 在 vim 下输入/关键字 快速查找，按 n 键查找下一个 # 改为需要配置的域名或 IP，内网则为本机 IP external_url 'http://192.168.0.250' # 修改监听端口，默认 80 nginx['listen_port'] = 22333 # ssh 地址配置，端口保持与 ssh 登录端口一致 gitlab_rails['gitlab_ssh_host'] = '192.168.0.250' gitlab_rails['gitlab_shell_ssh_port'] = 30001 # Email 设置 gitlab_rails['gitlab_email_enabled'] = true gitlab_rails['gitlab_email_from'] = 'xxx@qq.com' # 自己的邮箱 gitlab_rails['gitlab_email_display_name'] = 'Name' # gitlab 给你发邮件时使用的名字。 以下配置按需修改 # 若未安装 postfix，则需要配置 smtp gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = smtp.qq.com gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = xxxx@qq.com gitlab_rails['smtp_password'] = xxxxxxxxxxx gitlab_rails['smtp_domain'] = qq.com gitlab_rails['smtp_authentication'] = login gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false # 关闭普罗米修斯监控（内存低时可以关闭节省资源） prometheus['enable'] = false prometheus['monitor_kubernetes'] = false   /etc/gitlab/gitlab.rb：主配置文件，包含外部URL、仓库目录、备份目录等  /etc/gitlab/gitlab-secrets.json：（执行gitlab-ctl reconfigure命令行后生成），包含各类密钥的加密信息  smtp 邮件服务商配置：https://docs.gitlab.com/omnibus/settings/smtp.html # 重新应用 gitlab 的配置，每次修改/etc/gitlab/gitlab.rb 文件之后执行 gitlab-ctl reconfigure # 查看初始密码 cat /etc/gitlab/initial_root_password # 或者直接重置密码，此命令从 13.9 版本后可用 gitlab-rake gitlab:password:reset # 开放端口 firewall-cmd --zone=public --permanent --add-port=22333/tcp firewall-cmd --reload # 查看状态 gitlab-ctl status  安装完成后建议关闭注册功能 4、Gitlab 备份 默认备份目录：/var/opt/gitlab/backups 修改 gitlab 配置文件：vim /etc/gitlab/gitlab.rb # 指定备份后数据存放的路径、权限、时间配置 gitlab_rails['manage_backup_path'] = true   #292行 开启备份功能 gitlab_rails['backup_path'] = /gitlab_backup  #293行 指定备份的路径 gitlab_rails['backup_archive_permissions'] = 0644  #296行 备份文件的权限 gitlab_rails['backup_keep_time'] = 604800   #301行 备份保留时间（保留7天） # 创建备份目录并授权 mkdir /gitlab_backup chown -R git:root /gitlab_backup/ # 重新生效 gitlab 配置 gitlab-ctl reconfigure # 手动备份 gitlab-rake gitlab:backup:create # 定时备份 0 3 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create &gt;&gt; /gitlab_backup/crontab.log 2&gt;&amp;1 5、Gitlab 恢复 只能还原到与备份文件相同的 gitlab 版本 # 下载安装与备份相同版本的 gitlab wget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ee/packages/el/7/gitlab-ee-13.10.3-ee.0.el7.x86_64.rpm/download.rpm rpm -ivh gitlab-ee-13.10.3-ee.0.el7.x86_64.rpm # 参考上述安装修改配置 vim /etc/gitlab/gitlab.rb gitlab-ctl reconfigure # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 将备份文件放在相应的备份路径下 mv 1618907900_2021_04_20_13.10.3-ee_gitlab_backup.tar /var/opt/gitlab/backups/ chmod 777 1618907900_2021_04_20_13.10.3-ee_gitlab_backup.tar # gitlab 的恢复操作会先将当前所有的数据清空 gitlab-rake gitlab:backup:restore BACKUP=1618907900_2021_04_20_13.10.3-ee  # 重启 gitlab gitlab-ctl restart # 恢复命令完成后，可以 check 检查一下恢复情况 gitlab-rake gitlab:check SANITIZE=true 其它命令 # 日志目录：/var/log/gitlab # 查看 nginx 访问日志 gitlab-ctl tail nginx/gitlab_acces.log t # 查看 postgresql 日志 gitlab-ctl tail postgresql # 查看所有服务 gitlab-ctl service-list # 检查配置并启动 gitlab-ctl check-config 6、其他 修改 root 密码 # 直接重置密码，此命令从 13.9 版本后可用 gitlab-rake gitlab:password:reset # 进控制台修改 gitlab-rails console -e production user.password = 'new_password' user.password_confirmation = 'new_password' user.save! exit https://docs.gitlab.com/ee/security/reset_user_password.html#use-a-rails-console 添加SSL认证 参考 https://blog.csdn.net/qq_43626147/article/details/109160229 Gitlab 管理页面保存后报 500 错误 首先，遍历数据库中所有可能的加密值，验证它们是否可使用 gitlab-secrets.json解密。 gitlab-rake gitlab:doctor:secrets  gitlab-rails dbconsole -- Clear project tokens UPDATE projects SET runners_token = null, runners_token_encrypted = null; -- Clear project tokens UPDATE projects SET runners_token = null, runners_token_encrypted = null; -- Clear group tokens UPDATE namespaces SET runners_token = null, runners_token_encrypted = null; -- Clear instance tokens UPDATE application_settings SET runners_registration_token_encrypted = null; -- Clear key used for JWT authentication -- This may break the $CI_JWT_TOKEN job variable: -- https://gitlab.com/gitlab-org/gitlab/-/issues/325965 UPDATE application_settings SET encrypted_ci_jwt_signing_key = null; -- Clear runner tokens UPDATE ci_runners SET token = null, token_encrypted = null; -- truncate web_hooks table TRUNCATE web_hooks CASCADE; 参考  Doctor Rake tasks Reset runner registration tokens Issue-26171 Gitlab的安装及使用 ",
      "url"      : "https://blog.nine.gt.tc/2021/12/30/centos7-install-gitlab/",
      "keywords" : "Linux, Centos, Gitlab"
    } ,
  
    {
      "title"    : "内网下使用 Nginx 转发邮件",
      "category" : "Nginx",
      "content": "内网邮件通过 Nginx 代理进行转发 1、安装 stream 使用 stream 方式代理 smtp 协议的邮件服务，需安装 stream 模块 # 查看已安装模块 ./nginx -V # 编译时需加上 stream 模块 ./configure --prefix=/usr/local/nginx --with-stream ... make &amp;&amp; make install 2、nginx 配置 stream {  # 邮件转发  server {  listen 8765;  proxy_connect_timeout 5s;  proxy_timeout 5s;  proxy_pass smtp.qq.com:587;  } } 3、内网测试邮件发送 ",
      "url"      : "https://blog.nine.gt.tc/2022/03/25/nginx-forward-mail/",
      "keywords" : "Linux, Centos, Nginx"
    } ,
  
    {
      "title"    : "Git 总结",
      "category" : "Git",
      "content": "原文地址：码志 常用命令    功能  命令     添加文件/更改到暂存区  git add filename    添加所有文件/更改到暂存区  git add .    提交  git commit -m msg    从远程仓库拉取最新代码  git pull origin master    推送到远程仓库  git push origin master    查看配置信息  git config –list    查看文件列表  git ls-files    比较工作区和暂存区  git diff    比较暂存区和版本库  git diff –cached    比较工作区和版本库  git diff HEAD    从暂存区移除文件  git reset HEAD filename    查看本地远程仓库配置  git remote -v    回滚  git reset –hard 提交SHA    强制推送到远程仓库  git push -f origin master    修改上次 commit  git commit –amend    推送 tags 到远程仓库  git push –tags    推送单个 tag 到远程仓库  git push origin [tagname]    删除远程分支  git push origin –delete [branchName]    远程空分支（等同于删除）  git push origin :[branchName]    查看所有分支历史  gitk –all    按日期排序显示历史  gitk –date-order   Q&amp;A 如何解决gitk中文乱码，git ls-files 中文文件名乱码问题？ 在~/.gitconfig中添加如下内容 [core] quotepath = false [gui] encoding = utf-8 [i18n] commitencoding = utf-8 [svn] pathnameencoding = utf-8 参考 http://zengrong.net/post/1249.htm 如何处理本地有更改需要从服务器合入新代码的情况？ git stash git pull git stash pop stash 查看 stash 列表： git stash list 查看某一次 stash 的改动文件列表（不传最后一个参数默认显示最近一次）： git stash show stash@{0} 以 patch 方式显示改动内容 git stash show -p stash@{0} 应用某次 stash 改动内容： git stash apply stash@{0} 如何合并 fork 的仓库的上游更新？ git remote add upstream https://upstream-repo-url git fetch upstream git merge upstream/master 如何通过 TortoiseSVN 带的 TortoiseMerge.exe 处理 git 产生的 conflict？ 将 TortoiseMerge.exe 所在路径添加到 path 环境变量。 运行命令 git config --global merge.tool tortoisemerge 将 TortoiseMerge.exe 设置为默认的 merge tool。  在产生 conflict 的目录运行 git mergetool，TortoiseMerge.exe 会跳出来供你 resolve conflict。   也可以运行 git mergetool -t vimdiff 使用 -t 参数临时指定一个想要使用的 merge tool。   不想跟踪的文件已经被提交了，如何不再跟踪而保留本地文件？ git rm --cached /path/to/file，然后正常 add 和 commit 即可。 如何不建立一个没有 parent 的 branch？ git checkout --orphan newbranch 此时 git branch 是不会显示该 branch 的，直到你做完更改首次 commit。比如你可能会想建立一个空的 gh-pages branch，那么： git checkout --orphan gh-pages git rm -rf . // add your gh-pages branch files git add . git commit -m init commit submodule 的常用命令 添加 submodule git submodule add git@github.com:philsquared/Catch.git Catch 这会在仓库根目录下生成如下 .gitmodules 文件并 clone 该 submodule 到本地。 [submodule Catch] path = Catch url = git@github.com:philsquared/Catch.git 更新 submodule git submodule update 当 submodule 的 remote 有更新的时候，需要 git submodule update --remote 当在本地拉取了 submodule 的远程更新，但是想反悔时： git submodule update --init 删除 submodule 在 .gitmodules 中删除对应 submodule 的信息，然后使用如下命令删除子模块所有文件： git rm --cached Catch clone 仓库时拉取 submodule git submodule update --init --recursive 删除远程 tag git push origin --delete tag [tagname] 基于某次 commit 创建 tag git tag &lt;tag name&gt; &lt;commit id&gt; git tag v1.0.0 ef0120 清除未跟踪文件 git clean 可选项：    选项  含义     -q, –quiet  不显示删除文件名称    -n, –dry-run  试运行    -f, –force  强制删除    -i, –interactive  交互式删除    -d  删除文件夹    -e, –exclude  忽略符合 的文件    -x  清除包括 .gitignore 里忽略的文件    -X  只清除 .gitignore 里忽略的文件   忽略文件属性更改 因为临时需求对某个文件 chmod 了一下，结果这个就被记为了更改，有时候这是想要的，有时候这会造成困扰。 git config --global core.filemode false 参考：How do I make Git ignore file mode (chmod) changes? 忽略除某后缀名以外的所有文件 忽略除了 .c 后缀名以外的所有文件。 * !*.c !*/ gitignore 里，*、?、[] 可用作通配符。 patch 将未添加到暂存区的更改生成 patch 文件： git diff &gt; demo.patch 将已添加到暂存区的更改生成 patch 文件： git diff --cached &gt; demo.patch 合并上面两条命令生成的 patch 文件包含的更改： git apply demo.patch 将从 HEAD 之前的 3 次 commit 生成 3 个 patch 文件： （HEAD 可以换成 sha1 码） git format-patch -3 HEAD 生成 af8e2 与 eaf8e 之间的 commits 的 patch 文件： （注意 af8e2 比 eaf8e 早） git format-patch af8e2..eaf8e 合并 format-patch 命令生成的 patch 文件： git am 0001-Update.patch 与 git apply 不同，这会直接 add 和 commit。 只下载最新代码 git clone --depth 1 git://xxxxxx 这样 clone 出来的仓库会是一个 shallow 的状态，要让它变成一个完整的版本： git fetch --unshallow 或 git pull --unshallow 基于某次 commit 创建分支 git checkout -b test 5234ab 表示以 commit hash 为 5234ab 的代码为基础创建分支 test。 恢复单个文件到指定版本 git reset 5234ab MainActivity.java 恢复 MainActivity.java 文件到 commit hash 为 5234ab 时的状态。 设置全局 hooks git config --global core.hooksPath C:/Users/mazhuang/git-hooks 然后把对应的 hooks 文件放在最后一个参数指定的目录即可。 比如想要设置在 commit 之前如果检测到没有从服务器同步则不允许 commit，那在以上目录下建立文件 pre-commit，内容如下： #!/bin/sh CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD) git fetch origin $CURRENT_BRANCH HEAD=$(git rev-parse HEAD) FETCH_HEAD=$(git rev-parse FETCH_HEAD) if [ $FETCH_HEAD = $HEAD ]; then  echo Pre-commit check passed  exit 0 fi echo Error: you need to update from remote first exit 1 查看某次 commit 的修改内容 git show &lt;commit-hash-id&gt; 查看某个文件的修改历史 git log -p &lt;filename&gt; 查看最近两次的修改内容 git log -p -2 应用已存在的某次更改 / merge 某一个 commit git cherry-pick &lt;commit-hash-id&gt; cherry-pick 有更多详细的用法，可以参见帮助文档。 命令行自动补全 在 shell 里加载 git-completion 系列脚本，详见 https://github.com/git/git/tree/master/contrib/completion 文件每一行变更明细 git blame &lt;filename&gt; 找回曾经的历史 git reflog 列出 HEAD 曾指向过的一系列 commit，它们只存在于本机，不是版本仓库的一部分。 还有： git fsck 记住 http(s) 方式的用户名密码 在有些情况下无法使用 git 协议，比如公司的 git 服务器设置了 IP 白名单，只能在公司内网使用 ssh，那么在外面就只能使用 http(s) 上传下载源码了，但每次都手动输入用户名/密码特别惨，于是乎就记住吧。 设置记住密码（默认 15 分钟）： git config --global credential.helper cache 自定义记住的时间（如下面是一小时）： git config credential.helper 'cache --timeout=3600' 长期存储密码： git config --global credential.helper store git commit 使用 vim 编辑 commit message 中文乱码 这个问题在 Windows 下出现了，没找到能完美解决的办法，一种方法是在 vim 打开后输入： :set termencoding=GBK 这就有点太麻烦了，折衷的方法是改为使用 gVim 或其它你喜欢的编辑器来编辑 commit message： git config --global core.editor gvim 参考： How do I make Git use the editor of my choice for commits? 转：git windows中文 乱码问题解决汇总 另外在升级 Vim 到 8.1 之后，由于 PATH 环境变量里加的还是 vim80 文件夹，导致 git commit 时提示： error: cannot spawn gvim: No such file or directory error: unable to start editor 'gvim' Please supply the message using either -m or -F option. 使用 which gvim 查看： $ which gvim /usr/bin/which: no gvim in xxxxxxx 将 PATH 里添加的 vim80 路径改为 vim81 后解决。 git log 中文乱码 只在 Windows 下遇到。 git config --global i18n.logoutputencoding gbk 编辑 git 安装目录下 etc/profile 文件，在最后添加如下内容： export LESSCHARSET=utf-8 参考：Git for windows 中文乱码解决方案 git diff 中文乱码 只在 Windows 下遇到，目前尚未找到有效办法。 统计代码行数 CMD 下直接执行可能失败，可以在右键，Git Bash here 里执行。 统计某人的代码提交量 git log --author=$(git config --get user.name) --pretty=tformat: --numstat | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf added lines: %s removed lines : %s total lines: %s  ,add,subs,loc }' 仓库提交都排名前 5 如果看全部，去掉 head 管道即可。 git log --pretty='%aN' | sort | uniq -c | sort -k1 -n -r | head -n 5 仓库提交者（邮箱）排名前 5 这个统计可能不太准，可能有同名。 git log --pretty=format:%ae | gawk -- '{ ++c[$0]; } END { for(cc in c) printf %5d %s  ,c[cc],cc; }' | sort -u -n -r | head -n 5 贡献者排名 git log --pretty='%aN' | sort -u | wc -l 提交数统计 git log --oneline | wc -l 参考：Git代码行统计命令集 修改文件名时的大小写问题 修改文件名大小写时，默认会被忽略（在 Windows 下是这样），让 git 对大小写敏感的方法： git config --global core.ignorecase false 或者使用 git mv oldname newname 也是可以的。 修复 gitk 在 macOS 下显示模糊的问题 gitk 很方便，但是在 Mac 系统下默认显示很模糊，影响体验。 根据网上搜索的结果，解决方法有两种，我采用第一种解决，第二种未尝试。 方法一：  重新启动机器，按 command + R 等 Logo 和进度条出现，会进入 Recovery 模式，选择顶部的实用工具——终端，运行以下命令：  csrutil disable   重新启动机器。   编辑 Wish 程序的 plist，启动高分辨率屏支持。  sudo gvim /System/Library/Frameworks/Tk.framework/Versions/Current/Resources/Wish.app/Contents/Info.plist   在最后的 &lt;/dict&gt; 前面加上以下代码  &lt;key&gt;NSHighResolutionCapable&lt;/key&gt; &lt;true/&gt;   更新 Wish.app。  sudo touch Wish.app   再次用 1 步骤的方法进入 Recovery 模式，执行 csrutil enable 启动对系统文件保护，再重启即可。 参考：Mac 中解决 gitk 模糊问题 方法二： brew cask install retinizer open /System/Library/Frameworks/Tk.framework/Versions/Current/Resources/ 打开 retinizer，将 Wish.app 拖到 retinizer 的界面。 参考：起底Git-Git基础 clone 时指定 master 以外的分支 git clone -b &lt;branch name&gt; --single-branch &lt;repo address&gt; 获取当前分支名称 git symbolic-ref --short -q HEAD 解决 no man viewer handled the request 运行命令 git stash --help 报错： warning: failed to exec 'man': Invalid argument fatal: no man viewer handled the request 原因是 Windows 下没有 man 命令。 可以修改 git 配置让命令的帮助文档通过浏览器打开。 git config --global help.format web 比较两个分支的差异 显示出所有差异详情： git diff &lt;branch_name_1&gt; &lt;branch_name_2&gt; 显示有差异的文件列表： git diff &lt;branch_name_1&gt; &lt;branch_name_2&gt; --stat 显示指定文件的差异详情： git diff &lt;branch_name_1&gt; &lt;branch_name_2&gt; &lt;filename&gt; 查看 A 分支有，B 分支没有的提交： git log &lt;branch_name_A&gt; ^&lt;branch_name_B&gt; git 操作时报警告 警告信息： @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @  WARNING: POSSIBLE DNS SPOOFING DETECTED!  @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ The ECDSA host key for gitlab.xxxx.com has changed, and the key for the corresponding IP address 121.40.151.8 is unknown. This could either mean that DNS SPOOFING is happening or the IP address for the host and its host key have changed at the same time. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!  @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:bud2tDwxl9687vMOUUBGXlwZhjxDTu7eVF43ojAu1Pw. Please contact your system administrator. Add correct host key in /c/Users/mzlogin/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /c/Users/mzlogin/.ssh/known_hosts:1 ECDSA host key for gitlab.xxxx.com has changed and you have requested strict checking. Host key verification failed. fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 解决方案： rm ~/.ssh/known_hosts 然后重新操作即可。 删除不存在对应远程分支的本地分支 （本小节有效性存疑，有时候并不好使。） $ git remote show origin develop      tracked master     tracked feature/new-ui    tracked refs/remotes/origin/feature/test stale (use 'git remote prune' to remove) ... 其中 feature/test 就是不存在远程分支的本地分支。 $ git remote prune origin 清除完成。 ",
      "url"      : "https://blog.nine.gt.tc/wiki/git/",
      "keywords" : "Git, 版本控制"
    } ,
  
    {
      "title"    : "Jenkins",
      "category" : "Jenkins",
      "content": "学习和使用 jenkins 过程中遇到的问题和解决办法 常用插件  中文汉化：Chinese 权限管理：Role-based Authorization Strategy 凭证管理：Credentials Binding 自定义备份 Jenkins Home 目录：Backup git：Git git 分支构建支持：Git Parameter gitlab 的 webhook 功能支持：Gitlab Hook Gitlab sonarqube 代码扫描：SonarQube Scanner 远程部署到 Tomcat：Deploy to container Maven 项目支持：Maven Integration 流水线项目支持：Pipeline 邮件发送：Email Extension NodeJS：NodeJS 钉钉：DingTalk 使 job 具备版本管理：Job Configuration History 构建日志上色：AnsiColor 自定义 Jenkins 主题：Simple Theme 添加侧边栏按钮链接：Sidebar Link 批量删除构建历史 在Manage Jenkins -&gt; Script Console下运行以下命令 // 项目名称 def jobName = web_demo_pipeline // 删除至 maxNumber 的构建历史 def maxNumber = 30 Jenkins.instance.getItemByFullName(jobName).builds.findAll { it.number &lt;= maxNumber }.each { it.delete() }  离线安装插件 插件下载地址：https://updates.jenkins-ci.org/download/plugins，下载离线包，点击上传进行安装 shell 脚本进程被杀问题  自 1.260 版本开始，Jenkins 默认会在构建完成后杀死构建过程中由 jenkins 中的 shell 命令触发的衍生进程ProcessTreeKiller: https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) 方法一 修改配置，启动 jenkins 时禁止其杀死衍生进程：vim /etc/sysconfig/jenkins 在 JENKINS_JAVA_OPTIONS 中加入 -Dhudson.util.ProcessTree.disable=true 重启 jenkins 生效：systemctl restart jenkins 方法二： Pipeline：设置 JENKINS_NODE_COOKIE 参数的值： withEnv(['JENKINS_NODE_COOKIE=dontkillme']) {  sh 'sh ${tomcatHome}/bin/startup.sh' } 非 Pipeline：  在执行 shell 输入框中加入BUILD_ID=dontKillMe ，即可防止 jenkins 杀死启动的进程   临时改变 BUILD_ID 值，使得 jenkins 不会找到并结束掉 run.sh 启动的后台进程 OLD_BUILD_ID=$BUILD_ID echo $OLD_BUILD_ID export BUILD_ID=dontKillMe # 执行 tomcat 启动脚本 sh ${tomcat}/bin/startup.sh # 改回原来的 BUILD_ID 值 export BUILD_ID=$OLD_BUILD_ID echo $BUILD_ID node：未找到命令 使用 sonar 扫描项目时报警告： 发现服务器上未装NodeJS，但是装好后 Jenkins 内执行 shell 命令无法获取环境变量 于是搜索一番后找到原因：https://blog.csdn.net/zzusimon/article/details/57080337 （1） 可以通过-i参数和-l参数让 bash 为 login shell and interactive shell，就可以读取/etc/profile和~/.bash_profile等文件，即在 jenkins Execute Shell 里可以这么写 #!/bin/bash -ilex ... ... 对于 e 参数表示一旦出错，就退出当前的 shell，x 参数表示可以显示所执行的每一条命令 （2）使用流水线语法生成脚本，将需要调用 NodeJS 的 shell 命令写在括号内： 测试成功： ",
      "url"      : "https://blog.nine.gt.tc/wiki/jenkins/",
      "keywords" : "Jenkins, Linux, Skill"
    } ,
  
    {
      "title"    : "Linux",
      "category" : "Linux",
      "content": "学习和使用 Linux 过程中遇到的问题和解决办法 用户名所在行高亮显示 执行下面的脚本后重新登录即可 wget https://fastly.jsdelivr.net/gh/NineHolic/nineholic.github.io@master/_posts/files/shell/setcolor.sh &amp;&amp; /bin/bash setcolor.sh 或者把以下内容添加对应用户到 .bashrc 中： force_color_prompt=yes if [ -n $force_color_prompt ]; then  if [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; then  t# We have color support; assume it's compliant with Ecma-48  t# (ISO/IEC-6429). (Lack of such support is extremely rare, and such  t# a case would tend to support setf rather than setaf.)  tcolor_prompt=yes  else  tcolor_prompt=  fi fi if [ $color_prompt = yes ]; then  PS1='${debian_chroot:+($debian_chroot)}  [  033[01;32m  ]  u@  h  [  033[00m  ]:  [  033[01;34m  ]  w  [  033[00m  ]  $ ' else  PS1='${debian_chroot:+($debian_chroot)}  u@  h:  w  $ ' fi unset color_prompt force_color_prompt # If this is an xterm set the title to user@host:dir case $TERM in xterm*|rxvt*)  PS1=  [  e]0;${debian_chroot:+($debian_chroot)}  u@  h:   w  a  ]$PS1  ;; *)  ;; esac # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then  test -r ~/.dircolors &amp;&amp; eval $(dircolors -b ~/.dircolors) || eval $(dircolors -b)  alias ls='ls --color=auto'  #alias dir='dir --color=auto'  #alias vdir='vdir --color=auto' alias grep='grep --color=auto'  alias fgrep='fgrep --color=auto'  alias egrep='egrep --color=auto' fi Ubuntu 下可直接修改对应用户目录下的 .bashrc 文件，把# force_color_prompt=yes注释去掉后重新登录 （如果使用其他用户登录，其下的 .bashrc 也要修改，与终端软件无关） 更换 yum 源 将本地 CentOS 的 yum 安装源更换为阿里源 # 备份本地 yum 源 mv /etc/yum.repos.d/* /etc/yum.repos.d.bak/ # 使用 curl 或 wget 命令下载阿里源文件 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 清理缓存 yum clean all # 生成新的缓存 yum makecache # 测试 yum yum search openssh 更换 apt 源 清华开源镜像站：https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu，选择ubuntu版本 # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 16.04 LTS deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse # 预发布软件源，不建议启用 # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse # 备份本地源文件 cp /etc/apt/sources.list /etc/apt/sources.bak1 # 修改源文件，将清华源写入 vim /etc/apt/sources.list # 更新软件源列表：访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑 apt-get update # 更新软件：更新本地已安装的软件，生产环境慎用 apt-get upgrade 查看 linux 版本 # 查看版本 cat /proc/version uname -a cat /etc/redhat-release  域名无法ping通 # 修改 /etc/reolv.conf，配置 dns，添加两行 nameserver 114.114.114.114 nameserver 223.5.5.5  修改主机名称 修改 etc 目录下的 hosts 文件和 hostname 文件后重启系统 修改 ssh 端口号 # 将默认的 22 端口改为 22333 端口 vim /etc/ssh/sshd_config # 重启 ssh 服务 systemctl restart sshd 禁止 root 登录 此项修改需已有其它账号，否则会无法登录 # 将 PermitRootLogin 所在行注释去掉，yes 改为 no vim /etc/ssh/sshd_config # 重启 ssh，此时使用 root 账号连接会提示 ssh 服务器拒绝了密码，说明配置成功 systemctl restart sshd 删除自带的 openjdk # 查看 openjdk 的路径 alternatives --config java # ARM 架构位置 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.aarch64/jre/bin/java # X86 架构位置 /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.171-2.6.13.2.el7.x86_64/jre/bin/java # 假删除（防止出现一些奇怪错误），解除 openjdk 的链接配置后自己的 jdk 就行 alternatives --remove java /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.aarch64/jre/bin/java # 真删除，使用 java -version 查看是否删除成功 rm -rf java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.aarch64 磁盘空间已满，但实际占用却很小 如下图情况，使用du -sh查看占用大小 使用lsof | grep deleted查看，没有lsof命令则使用yum安装：yum -y install lsof 可以看到java进程占用了大约49G空间，使用kill -9 35467杀掉进程释放空间 防火墙操作 firewall # 开机启用/禁用 systemctl enable firewalld systemctl disable firewalld # 查看 firewall 服务状态 systemctl status firewalld # 查看 firewall 的状态 firewall-cmd --state # 服务命令 service firewalld start service firewalld stop service firewalld restart # 查看防火墙规则 firewall-cmd --list-all # 开放端口 firewall-cmd --permanent --zone=public --add-port=8080/tcp firewall-cmd --permanent --zone=public --add-port=8080-9090/tcp # 移除端口 firewall-cmd --permanent --zone=public --remove-port=80/tcp # 对指定 ip 开放端口 firewall-cmd --permanent --add-rich-rule=rule family=ipv4 source address=192.168.0.105 port protocol=tcp port=8859 accept # 删除某个IP firewall-cmd --permanent --remove-rich-rule=rule family=ipv4 source address=192.168.1.51 accept # 针对一个ip段访问 firewall-cmd --permanent --add-rich-rule=rule family=ipv4 source address=192.168.1.0/24 port protocol=tcp port=8859 accept firewall-cmd --permanent --add-rich-rule=rule family=ipv4 source address=192.168.0.0/16 accept # 端口转发 firewall-cmd --permanent --zone=public --add-forward-port=port=3336:proto=tcp:toport=3306:toaddr=192.168.0.105 # 查看转发的端口 firewall-cmd --list-forward-ports # 更新防火墙规则(修改配置后需执行) firewall-cmd --reload # 参数解释 1、firwall-cmd：是 Linux 提供的操作 firewall 的一个工具； 2、--permanent：设置永久； 3、--zone=public：作用域 4、--add-port：标识添加的端口； iptables 相关命令失效 原因是 Centos 7 开始默认使用 firewalle 管理防火墙 # 停止 firewalld 服务、禁止firewall开机启动 systemctl stop firewalld systemctl disable firewalld.service # 安装 iptables-services yum -y install iptables-services # 设置防火墙开机启动 systemctl enable iptables.service # 服务命令 systemctl stop iptables systemctl start iptables systemctl restart iptables systemctl reload iptables # 查看 iptables 现有规则 iptables -L -n 替换为 unix 格式换行（将   r 替换成空） 脚本运行时出现问题 原因：在 window 下编写脚本然后在上传到 Linux 上时，由于 window 上换行显示的为   r  ，然而在 linux 上换行显示应该为   ，所以在 Linux 下无法读取从 window 上传来的脚本，将   r 替换成空即可（ Mac 系统里，每行结尾是回车，即   r ） chmod +x color.sh sed -i 's/  r$//' color.sh vi 编辑时启用数字小键盘 使用 vi 编辑文件时小键盘数字会变成字母，要恢复输入数字状态需要在 Xshell 中修改 VT 模式设为普通 为普通用户添加 sudo 权限 # root 用户下执行 chmod u+w /etc/sudoers # 默认新建的用户不在 sudo 组 vi /etc/sudoers # 添加一行，默认 5 分钟后刚才输入的 sodo 密码过期，下次 sudo 需要重新输入密码 centos ALL=(ALL) ALL # 加上 NOPASSWD 可以不用每次输入密码 centos ALL=(ALL)NOPASSWD: ALL  注意： 有的时候你的将用户设了 nopasswd，但是不起作用，原因是被后面的 group 的设置覆盖了，需要把 group的设置也改为 nopasswd joe ALL=(ALL)NOPASSWD: ALL %admin ALL=(ALL)NOPASSWD: ALL 获取目录下的文件名 # 显示目录下的文件名，带后缀 find /home/oracle/impdir/ -name '*.DMP' -exec basename {}   ;  # 显示目录下的文件名，不带后缀 for file_name in `ls /home/oracle/impdir/*.DMP`;do basename $file_name .DMP;done  Centos 永久关闭蜂鸣器 虚拟机安装 centos 后出现蜂鸣声 # root用户下执行 echo “rmmod pcspkr” &gt;&gt;/etc/rc.d/rc.local # 添加执行权限后重启 chmod +x /etc/rc.d/rc.local ",
      "url"      : "https://blog.nine.gt.tc/wiki/linux/",
      "keywords" : "Centos, Ubuntu, Linux, Skill"
    } 
  
]

